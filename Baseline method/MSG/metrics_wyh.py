import json
import math

def calculate_Precision(recommend_list, removed_tpl_list, top_n):
    hit = 0.0
    if len(recommend_list) == 0:
        return hit
    for i in range(min(top_n, len(recommend_list))):
        if recommend_list[i] in removed_tpl_list:
            hit += 1
    return hit / top_n

def calculate_Recall(recommend_list, removed_tpl_list, top_n):
    hit = 0.0
    if len(recommend_list) == 0 or len(removed_tpl_list) == 0:
        return 0
    for i in range(min(top_n, len(recommend_list))):
        if recommend_list[i] in removed_tpl_list:
            hit += 1
    return hit / len(removed_tpl_list)

def calculate_NDCG(recommend_list, removed_tpl_list, top_n):
    DCG = 0.0
    IDCG = 0.0
    for i in range(min(top_n, len(recommend_list))):
        if recommend_list[i] in removed_tpl_list:
            DCG += 1 / math.log2(i + 2)
    for i in range(min(top_n, len(removed_tpl_list))):
        IDCG += 1 / math.log2(i + 2)
    return DCG / IDCG if IDCG > 0 else 0

def calculate_AP(recommend_list, removed_tpl_list, top_n):
    cor_list = []
    if len(recommend_list) == 0:
        return 0
    for i in range(min(top_n, len(recommend_list))):
        if recommend_list[i] in removed_tpl_list:
            cor_list.append(1.0)
        else:
            cor_list.append(0.0)
    sum_cor_list = sum(cor_list)
    if sum_cor_list == 0:
        return 0

    summary = 0.0
    for i in range(len(cor_list)):
        summary += (sum(cor_list[:i + 1]) / (i + 1)) * cor_list[i]
    return summary / sum_cor_list

# def evaluate_metrics_from_file(greedy_file_path, top_n_list=[1, 5, 10], total_api_count=940):
#     removed_apis_list = []
#     predict_apis_list = []
#
#     with open(greedy_file_path, 'r') as f:
#         for line in f:
#             item = json.loads(line)
#             removed = [api for api in item["remove_apis"] if api != 1]  # 1 æ˜¯ padding
#             predicted = item["predict_apis"]
#             removed_apis_list.append(removed)
#             predict_apis_list.append(predicted)
#
#     metrics_result = {n: {'precision': 0.0, 'recall': 0.0, 'ndcg': 0.0, 'map': 0.0, 'coverage': 0.0} for n in top_n_list}
#     count = len(removed_apis_list)
#     print(count)
#     for removed, predicted in zip(removed_apis_list, predict_apis_list):
#         for n in top_n_list:
#             topn_preds = predicted[:n]
#             metrics_result[n]['precision'] += calculate_Precision(topn_preds, removed, n)
#             metrics_result[n]['recall'] += calculate_Recall(topn_preds, removed, n)
#             metrics_result[n]['ndcg'] += calculate_NDCG(topn_preds, removed, n)
#             metrics_result[n]['map'] += calculate_AP(topn_preds, removed, n)
#
#     for n in top_n_list:
#         appeared_apis = set()
#         for predicted in predict_apis_list:
#             appeared_apis.update(predicted[:n])
#         coverage = len(appeared_apis) / total_api_count
#         metrics_result[n]['coverage'] = coverage
#
#     for n in top_n_list:
#         metrics_result[n]['precision'] /= count
#         metrics_result[n]['recall'] /= count
#         metrics_result[n]['ndcg'] /= count
#         metrics_result[n]['map'] /= count
#
#     return metrics_result
# better = [5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5015, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5027, 5028, 5032, 5033, 5036, 5037, 5038, 5039, 5040, 5042, 5044, 5045, 5046, 5049]
list_of_mashup_ids = [5774, 6183, 6368, 5737, 5313, 5862, 5965, 5074, 5294, 6365, 5040, 5384, 5797, 5387, 5886, 7059, 6781, 5156, 6745, 5267, 5440, 7152, 7053, 5486, 5656, 6998, 6213, 5304, 6724, 6150, 5468, 6949, 5246, 5123, 5550, 5912, 5724, 6017, 5904, 5336, 6172, 5321, 5071, 5944, 5899, 6105, 6944, 6496, 6860, 6501, 6757, 6741, 6770, 5736, 6662, 6867, 5252, 6386, 6067, 5646, 5999, 5488, 6747, 5062, 5721, 6398, 7076, 6206, 5827, 6893, 6180, 6100, 6087, 7041, 6642, 6292, 6530, 5319, 6570, 6093, 5255, 6455, 7046, 5118, 6836, 6515, 6466, 5803, 6954, 5861, 5542, 5593, 7100, 5790, 5234, 6146, 5345, 5026, 6617, 6035, 5786, 6291, 6236, 5631, 6957, 5769, 5707, 6459, 5672, 6901, 6874, 5475, 7133, 5748, 6349, 6982, 5551, 5657, 5259, 5323, 5265, 5436, 6115, 5532, 5315, 6258, 6107, 6914, 6090, 6684, 6078, 6521, 6483, 5122, 5287, 7005, 6785, 5687, 6473, 6041, 6651, 5658, 6528, 5025, 6174, 5136, 6320, 7026, 6933, 6655, 6738, 7095, 6272, 5360, 6490, 5099, 5183, 7089, 6120, 5595, 7094, 5943, 5466, 7044, 5492, 6621, 6936, 6591, 6184, 5989, 5603, 5841, 5100, 6018, 6759, 5632, 6928, 5685, 6064, 5601, 5795, 6594, 5616, 5407, 7148, 6763, 7146, 7107, 5591, 5990, 5437, 5180, 5782, 7110, 5620, 6497, 5359, 5032, 5637, 6321, 6241, 7070, 5952, 6411, 6397, 5879, 6126, 6310, 7138, 5806, 6693, 6253, 5768, 5950, 6124, 5892, 6214, 6202, 6667, 6148, 6762, 6328, 6875, 5460, 6626, 6589, 6428, 6056, 6973, 6350, 6228, 5548, 6649, 6392, 6529, 6210, 6375, 5039, 5353, 6935, 5224, 6895, 6226, 5712, 6366, 7035, 5640, 6302, 6748, 5539, 5663, 7055, 5947, 7069, 6827, 5037, 5641, 6193, 6542, 5706, 5762, 6323, 7093, 6985, 5316, 5676, 5758, 6938, 5244, 6472, 5727, 6798, 6574, 5338, 6502, 6943, 5885, 6832, 6749, 7056, 5433, 5410, 5500, 5157, 7007, 6342, 6682, 5781, 5339, 5189, 5661, 6340, 6015, 5508, 6022, 6971, 5937, 6279, 6907, 5472, 5599, 6454, 5703, 6506, 5577, 6149, 6761, 6450, 6540, 6709, 7067, 5801, 5982, 6771, 6633, 6305, 5811, 7048, 6246, 5846, 5873, 5696, 7137, 6348, 6908, 6978, 6543, 5438, 5859, 6469, 6577, 5733, 6070, 5241, 5439, 7132, 5408, 6976, 5266, 7149, 6729, 5998, 5954, 6862, 5709, 5725, 7119, 5253, 5450, 7114, 6054, 5935, 6900, 6926, 5364, 6580, 6132, 6773, 6123, 5968, 6564, 6295, 6930, 6788, 6842, 5969, 5366, 6255, 5233, 5710, 5298, 5678, 5223, 5759, 5674, 5186, 6899, 5380, 5069, 6351, 5458, 6608, 5723, 5061, 5106, 5206, 6740, 6845, 5016, 6102, 5597, 6921, 6136, 6512, 6043, 5473, 6270, 6274, 6557, 5705, 5909, 7109, 6627, 6704, 5147, 5770, 5474, 6062, 6162, 6252, 6353, 5276, 6652, 6517, 5429, 6179, 6996, 5866, 5890, 7120, 5953, 5491, 5871, 6003, 6765, 5480, 5719, 5554, 5344, 7043, 6892, 5324, 5018, 5351, 6130, 6960, 6737, 6843, 5686, 6198, 6703, 6361, 6555, 5897, 5697, 7143, 5213, 6416, 5541, 6980, 6932, 5945, 5851, 6653, 6135, 5648, 5587, 7071, 6092, 6425, 5563, 6436, 6086, 6293, 5487, 5327, 7135, 5798, 5633, 6731, 7102, 5933, 5031, 6261, 6696, 6307, 5058, 5434, 6710, 6182, 6275, 5084, 5869, 5515, 6677, 7125, 5867, 6294, 5659, 5221, 5568, 6235, 5534, 6816, 7128, 6430, 6161, 6950, 6733, 5776, 6369, 6810, 7158, 5560, 6470, 6994, 5402, 6440, 5417, 6265, 6607, 5348, 5576, 5730, 6547, 6204, 6229, 6147, 5959, 6937, 7065, 6434, 6048, 6096, 5575, 7118, 5662, 5023, 6128, 6379, 7162, 6889, 6207, 6610, 5145, 6243, 5609, 5814, 6602, 6829, 6329, 6331, 6670, 6250, 6063, 6721, 5459, 5877, 6094, 5858, 6904, 5089, 6053, 7025, 6021, 5256, 6322, 5083, 6782, 6552, 5479, 5629, 6593, 7064, 5966, 5896, 6121, 5580, 7088, 6409, 6267, 6707, 6190, 5700, 5536, 5358, 6823, 6726, 5889, 6987, 5289, 6992, 5815, 5829, 5079, 6619, 6371, 5328, 6167, 5726, 5317, 5288, 6504, 6797, 7050, 6890, 5248, 5681, 6376, 6487, 6663, 5605, 5022, 6880, 5857, 7077, 5171, 5393, 5126, 5988, 5883, 5337, 6786, 7024, 5994, 6389, 5177, 6766, 6461, 5441, 6538, 6622, 7112, 5212, 5444, 6628, 6163, 5833, 6417, 5949, 6189, 5992, 6467, 5421, 7157, 6990, 6289, 5694, 7075, 5045, 5418, 6421, 6817, 6281, 7034, 6262, 6370, 6898, 6732, 6458, 5435, 6864, 6325, 6364, 5772, 6919, 6355, 5831, 5498, 5048, 6604, 6175, 5128, 6142, 5926, 5063, 5299, 5722, 5495, 6835, 6955, 6647, 5900, 6508, 6383, 5679, 6514, 5958, 5514, 5103, 6209, 5057, 7155, 7080, 6725, 5115, 6537, 6664, 7151, 5556, 6485, 6134, 6549, 5135, 5379, 7047, 5559, 5312, 6620, 7113, 6044, 5209, 5347, 5614, 5924, 5825, 6315, 5272, 5452, 7092, 6338, 6203, 6669, 6727, 5451, 6173, 6872, 6363, 7123, 5489, 6400, 6891, 5842, 6605, 6346, 5980, 6234, 7147, 5695, 6248, 6359, 6920, 6847, 6259, 7018, 6853, 6698, 6884, 7074, 5612, 6838, 5642, 5647, 5352, 6865, 6011, 5296, 6112, 5097, 6030, 6533, 5120, 5162, 5161, 6641, 5064, 7096, 5583, 6736, 6276, 6768, 5160, 6702, 6445, 5499, 5570, 5020, 5888, 5750, 5077, 5561, 6656, 6025, 5403, 5427, 5507, 6335, 7121, 6717, 7079, 6462, 5392, 6746, 5660, 6168, 6278, 5907, 6438, 5193, 6216, 5172, 5113, 5639, 5381, 5510, 5119, 5976, 6065, 5236, 6952, 6988, 5546, 5108, 5547, 6143, 5855, 5604, 5535, 6020, 6946, 6477, 6037, 6660, 6177, 6923, 6051, 5219, 5406, 6419, 6494, 5615, 6690, 6689, 5168, 6877, 5041, 6442, 5894, 5457, 6673, 7054, 6887, 7032, 5170, 6979, 6967, 5143, 5117, 5636, 7008, 5388, 6636, 6772, 5545, 5400, 5049, 6330, 6108, 5142, 5555, 5524, 6561, 5208, 5496, 5589, 6040, 5804, 5464, 5986, 6730, 5675, 5301, 5689, 6848, 6657, 5765, 6297, 5876, 6546, 6284, 6313, 5260, 6319, 5303, 6643, 6778, 5502, 5511, 6983, 7028, 6326, 5960, 5789, 5715, 7087, 6012, 5543, 5946, 5622, 6870, 6681, 5042, 5322, 6111, 5055, 7051, 6385, 5901, 6929, 5078, 6088, 6582, 5905, 5794, 5355, 5034, 6251, 6634, 6844, 5520, 5528, 6758, 6378, 5017, 6187, 6624, 6072, 6197, 6536, 5225, 5671, 6171, 5569, 5201, 6999, 5613, 6231, 6723, 5263, 5293, 6909, 7011, 6790, 6354, 5732, 6474, 6247, 6448, 6945, 5362, 5130, 6285, 5200, 5544, 6559, 5202, 7126, 6526, 6947, 5463, 6752, 6750, 5630, 5187, 5343, 6129, 6968, 5807, 6678, 5941, 6866, 6408, 6754, 7029, 6691, 5677, 5527, 6535, 5273, 7006, 5910, 6794, 5704, 6380, 6599, 6824, 5957, 5178, 6422, 5598, 5537, 7027, 5494, 6038, 6395, 6767, 6106, 5538, 6491, 6362, 6525, 6654, 7040, 6460, 6795, 6391, 6141, 5370, 5192, 5717, 6071, 6290, 6215, 5325, 6532, 6851, 7062, 5830, 6154, 6541, 6186, 5478, 5753, 6052, 5791, 5281, 6579, 5240, 5565, 6965, 5863, 5268, 5101, 6516, 5852, 5144, 6311, 5247, 5371, 5931, 6800, 6039, 5582, 6791, 6986, 6080, 6631, 6157, 5778, 7160, 6367, 5701, 5104, 6221, 6414, 6882, 5740, 6337, 6427, 5893, 5654, 6918, 6885, 5819, 5204, 6997, 6896, 5757, 6443, 5216, 6701, 5033, 6712, 5333, 5673, 5165, 5420, 7134, 6581, 6249, 5194, 5024, 5210, 6016, 5840, 6456, 5237, 5367, 5881, 6201, 6047, 5092, 6811, 7136, 5139, 6756, 5777, 6137, 6629, 7131, 7140, 6300, 6951, 6446, 6019, 7078, 5217, 5275, 5854, 6959, 5638, 6666, 5425, 6796, 5211, 7003, 5596, 6413, 5346, 5519, 7004, 5182, 7060, 5887, 6787, 5091, 6616, 7108, 5939, 5095, 6082, 6584, 6489, 6871, 5590, 5767, 6863, 5416, 5258, 5649, 5111, 7091, 5239, 5302, 5453, 5635, 6381, 6374, 6799, 5729, 6031, 6390, 6671, 5385, 6821, 5764, 5134, 5626, 7012, 6825, 6846, 6505, 5868, 6686, 5503, 6855, 6665, 5742, 7019, 5081, 5094, 6819, 5350, 6625, 6567, 6500, 5335, 6444, 5290, 6119, 6013, 5610, 6902, 5977, 6377, 6813, 6510, 6045, 7052, 5509, 6117, 6273, 5214, 5426, 6566, 6493, 6833, 5261, 6499, 5332, 5838, 5800, 6317, 5844, 5085, 5116, 6084, 6881, 5845, 6069, 5412, 5368, 6004, 6972, 6073, 6618, 5682, 7081, 6820, 5812, 6387, 6404, 5738, 5978, 5594, 5552, 5787, 5848, 5763, 5573, 6181, 5752, 6194, 6049, 6027, 6964, 6085, 5461, 6523, 5196, 6714, 6948, 5531, 5280, 5365, 6432, 5872, 6156, 6713, 5019, 6805, 6260, 5149, 5059, 6888, 5257, 5274, 6244, 5882, 5454, 6550, 5735, 6424, 5053, 6650, 5608, 6623, 6803, 6635, 5232, 6576, 6256, 7016, 6463, 6006, 5974, 6912, 6700, 6223, 5036, 6152, 5690, 5306, 6113, 5448, 5625, 5197, 5218, 5342, 5340, 5627, 7150, 5376, 5655, 6484, 6905, 5109, 6007, 6104, 6527, 6266, 5606, 6939, 6962, 6903, 5522, 6257, 6288, 6023, 5870, 6801, 5382, 5820, 6977, 5044, 7103, 6344, 7101, 6956, 6661, 5419, 6941, 5683, 6568, 7036, 5837, 5250, 5843, 6560, 6572, 6343, 6360, 5291, 6002, 5184, 6131, 5756, 6316, 5270, 5975, 5751, 6075, 7111, 5401, 6208, 7104, 5773, 5295, 6164, 5592, 5375, 6828, 5125, 6306, 6613, 5644, 6764, 5818, 6431, 5015, 6958, 5874, 5056, 6118, 5334, 5230, 7001, 5207, 5860, 6841, 6471, 5087, 5693, 6569, 5318, 6166, 6308, 5651, 5054, 5447, 6230, 6942, 5264, 6410, 6644, 6495, 6518, 5784, 6139, 5490, 6688, 6219, 5043, 5030, 6465, 5254, 7145, 7037, 6144, 6804, 6632, 5476, 5096, 6858, 5075, 6775, 6779, 6429, 5141, 5826, 5571, 5938, 6826, 5374, 6407, 5665, 6524, 6934, 7161, 6519, 5666, 6220, 5516, 6061, 6852, 6668, 6453, 5203, 5618, 5902, 7139, 5243, 5394, 5080, 6388, 6590, 5917, 5082, 6402, 5913, 6170, 5702, 5932]
def evaluate_metrics_from_file(greedy_file_path, top_n_list=[1, 5, 10], total_api_count=1382):
    filtered_data = []

    with open(greedy_file_path, 'r') as f:
        for line in f:
            item = json.loads(line)
            mashup_name = item.get("mashup_name", "")
            # filtered_data.append(item)
            if mashup_name.isdigit() and int(mashup_name) in list_of_mashup_ids:
                filtered_data.append(item)

    removed_apis_list = [[api for api in item['remove_apis'] if api != 1] for item in filtered_data]
    predict_apis_list = [item['predict_apis'] for item in filtered_data]

    metrics_result = {n: {'precision': 0.0, 'recall': 0.0, 'ndcg': 0.0, 'map': 0.0, 'coverage': 0.0} for n in top_n_list}
    count = len(removed_apis_list)
    print(f"Filtered mashups count: {count}")

    for removed, predicted in zip(removed_apis_list, predict_apis_list):
        for n in top_n_list:
            topn_preds = predicted[:n]
            metrics_result[n]['precision'] += calculate_Precision(topn_preds, removed, n)
            metrics_result[n]['recall'] += calculate_Recall(topn_preds, removed, n)
            metrics_result[n]['ndcg'] += calculate_NDCG(topn_preds, removed, n)
            metrics_result[n]['map'] += calculate_AP(topn_preds, removed, n)

    for n in top_n_list:
        appeared_apis = set()
        for predicted in predict_apis_list:
            appeared_apis.update(predicted[:n])
        coverage = len(appeared_apis) / total_api_count
        metrics_result[n]['coverage'] = coverage

    for n in top_n_list:
        metrics_result[n]['precision'] /= count
        metrics_result[n]['recall'] /= count
        metrics_result[n]['ndcg'] /= count
        metrics_result[n]['map'] /= count

    return metrics_result


# ç”¨æ³•
result = evaluate_metrics_from_file("decode_greedy29.jsonl", top_n_list=[3, 5, 10, 20])

for k, v in result.items():
    # print(
    #     f"@{k} â†’ & {v['precision']:.4f} & {v['recall']:.4f} & {v['map']:.4f} & {v['ndcg']:.4f} & {v['coverage']:.4f}")
    print(
        f" & {v['precision']:.4f} & {v['recall']:.4f} & {v['map']:.4f} & {v['ndcg']:.4f} & {v['coverage']:.4f}")

